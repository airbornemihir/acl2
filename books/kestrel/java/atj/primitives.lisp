; Java Library
;
; Copyright (C) 2019 Kestrel Institute (http://www.kestrel.edu)
;
; License: A 3-clause BSD license. See the LICENSE file distributed with ACL2.
;
; Author: Alessandro Coglio (coglio@kestrel.edu)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(in-package "JAVA")

(include-book "types")

(include-book "../language/primitive-operations")

(include-book "kestrel/std/system/function-name-listp" :dir :system)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defxdoc+ atj-primitives
  :parents (atj-implementation)
  :short "Representation of Java primitive types and operations for ATJ."
  :long
  (xdoc::topstring
   (xdoc::p
    "In order to have ATJ generate Java code
     that manipulates Java primitive values,
     we use ACL2 functions that correspond to
     the Java primitive values and operations:
     when ATJ encounters these specific ACL2 functions,
     it translate them to corresponding Java constructs
     that operate on primitive types;
     this happens only when @(':deep') is @('nil') and @(':guards') is @('t').")
   (xdoc::p
    "When deriving a Java implementation from a specification,
     where ATJ is used as the last step of the derivation,
     the steps just before the last one can refine the ACL2 code
     to use the aforementioned ACL2 functions,
     ideally using " (xdoc::seetopic "apt::apt" "APT") " transformations,
     so that ATJ can produce Java code
     that operates on primitive values where needed.
     Such refinement steps could perhaps be somewhat automated,
     and incorporated into a code generation step that actually encompasses
     some APT transformation steps
     before the final ATJ code generation step.")
   (xdoc::p
    "The natural place for the aforementioned ACL2 functions
     that correspond to Java primitive values and operations is the "
    (xdoc::seetopic "language" "language formalization")
    " that is being developed.
     So ATJ recognizes those functions from the language formalization,
     and translates them to Java code that manipulates Java primitive values.")
   (xdoc::p
    "Needless to say, here `primitive' refers to
     Java primitive types, values, and operations.
     It has nothing to do with the ACL2 primitive functions."))
  :order-subtopics t
  :default-parent t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defsection atj-java-int-value-representation-check
  :short "Checking the representation of Java @('int') values."
  :long
  (xdoc::topstring
   (xdoc::p
    "The fixtype @(tsee int-value)
     provides the representation of Java @('int') values in ACL2,
     which ATJ maps to Java @('int') values.
     While values of that ACL2 type can be treated abstractly,
     nothing prevents the use of ACL2 operations on them
     that expose their internal structure, e.g. taking the @(tsee car).
     Thus, Java code generated by ATJ must, if needed,
     convert Java @('int') values to
     the Java representation of their ACL2 representation,
     namely the ACL2 representation of the @(tsee int-value) representation.")
   (xdoc::p
    "The following theorem ensures that @(tsee int-value)
     has a certain representation,
     so that ATJ can use the same representation,
     for correctness and consistency."))

  (defrule atj-java-int-value-representation-check
    (equal (int-value-p x)
           (and (tuplep 2 x)
                (eq (first x) :int)
                (acl2::sbyte32p (second x))))
    :rule-classes nil
    :enable int-value-p))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defval *atj-primitive-constructors*
  :short "List of (the names of) the ACL2 functions that model
          the construction of Java primitive types."
  :long
  (xdoc::topstring
   (xdoc::p
    "For now the list only consists of @(tsee int-value).
     More will be added as ATJ support for Java primitive types is extended."))
  '(int-value))

(defval *atj-primitive-unops*
  :short "List of (the names of) the ACL2 functions that model
          Java primitive unary operations."
  :long
  (xdoc::topstring
   (xdoc::p
    "For now we list only some of the available ones
     from the language formalization.
     As more ATJ support for Java primitive types is developed,
     the list will be extended with more of the available functions."))
  '(int-plus
    int-minus
    int-not))

(defval *atj-primitive-binops*
  :short "List of (the names of) the ACL2 functions that model
          Java primitive binary operations."
  :long
  (xdoc::topstring
   (xdoc::p
    "For now we list only some of the available ones
     from the language formalization.
     As more ATJ support for Java primitive types is developed,
     the list will be extended with more of the available functions."))
  '(int-add
    int-sub
    int-mul
    int-div
    int-rem
    int-and
    int-xor
    int-ior
    int-int-shiftl
    int-int-shiftr
    int-int-ushiftr))

(defval *atj-primitive-fns*
  :short "List of (the names of) the ACL2 functions that model
          Java primitive value constructions and operations."
  (append *atj-primitive-constructors*
          *atj-primitive-unops*
          *atj-primitive-binops*)
  ///
  (assert-event (function-name-listp *atj-primitive-fns* (w state)))
  (assert-event (no-duplicatesp-eq *atj-primitive-fns*)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defsection atj-types-for-primitives
  :short "ATJ types for the Java primitive constructors and operations."

  (def-atj-main-function-type int-value (:ainteger) :jint)

  (def-atj-main-function-type int-plus (:jint) :jint)

  (def-atj-main-function-type int-minus (:jint) :jint)

  (def-atj-main-function-type int-add (:jint :jint) :jint)

  (def-atj-main-function-type int-sub (:jint :jint) :jint)

  (def-atj-main-function-type int-mul (:jint :jint) :jint)

  (def-atj-main-function-type int-div (:jint :jint) :jint)

  (def-atj-main-function-type int-rem (:jint :jint) :jint)

  (def-atj-main-function-type int-not (:jint) :jint)

  (def-atj-main-function-type int-and (:jint :jint) :jint)

  (def-atj-main-function-type int-xor (:jint :jint) :jint)

  (def-atj-main-function-type int-ior (:jint :jint) :jint)

  (def-atj-main-function-type int-int-shiftl (:jint :jint) :jint)

  (def-atj-main-function-type int-int-shiftr (:jint :jint) :jint)

  (def-atj-main-function-type int-int-ushiftr (:jint :jint) :jint))
