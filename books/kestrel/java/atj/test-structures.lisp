; Java Library
;
; Copyright (C) 2019 Kestrel Institute (http://www.kestrel.edu)
;
; License: A 3-clause BSD license. See the LICENSE file distributed with ACL2.
;
; Author: Alessandro Coglio (coglio@kestrel.edu)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(in-package "JAVA")

(include-book "../language/primitive-values")

(include-book "types")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defxdoc+ atj-test-structures
  :parents (atj-implementation)
  :short "Structures that store user-specified ATJ tests."
  :order-subtopics t
  :default-parent t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(fty::deftagsum atj-test-value
  :short "Values used for inputs and outputs in user-specified ATJ tests."
  :long
  (xdoc::topstring
   (xdoc::p
    "The Java methods generated by ATJ manipulate two kinds of values:")
   (xdoc::ol
    (xdoc::li
     "Objects of the AIJ classes for ACL2 values (e.g. @('Acl2Integer').
      These correspond to the ATJ "
     (xdoc::seetopic "atj-types" "types")
     " whose names start with @('a') (e.g. @(':ainteger').")
    (xdoc::li
     "Java @('int') values, which correspond to the ATJ type @(':jint').
      These values are used only in the shallow embedding with guards.
      As support for more Java primitive types is added to ATJ,
      this category of values will be extended."))
   (xdoc::p
    "Thus, when generating tests for the generated Java methods,
     the input and output values of the tests may be
     of these two different kinds.
     So we introduce a type for these two kinds of values.
     The @('a') values may be anything,
     while the @('j') values are restricted to (our model of) Java @('int')s."))
  (:avalue ((get acl2::any)))
  (:jvalue ((get int-value))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define atj-test-value-to-type ((test-value atj-test-value-p))
  :returns (type atj-typep)
  :short "ATJ type of an ATJ test value."
  (atj-test-value-case test-value
                       :avalue (atj-type-of-value test-value.get)
                       :jvalue :jint))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(fty::deflist atj-test-value-list
  :short "True lists of ATJ test values."
  :elt-type atj-test-value
  :true-listp t
  :elementp-of-nil nil
  :pred atj-test-value-listp)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define atj-test-values-to-types ((test-values atj-test-value-listp))
  :returns (types atj-type-listp)
  :short "Lift @(tsee atj-test-value-to-type) to lists."
  (cond ((endp test-values) nil)
        (t (cons (atj-test-value-to-type (car test-values))
                 (atj-test-values-to-types (cdr test-values)))))
  ///

  (defret len-of-atj-test-values-to-types
    (equal (len types) (len test-values))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(fty::defprod atj-test
  :short "Processed user-specified ATJ tests."
  :long
  (xdoc::topstring
   (xdoc::p
    "Each test specified by the @(':tests') input
     must have the form @('(namej termj)'),
     where @('termj') must translate to @('(fn in1 in2 ...)'),
     as explained in the documentation.
     As the @(':tests') input is processed,
     the information about each test is stored
     into an aggregate of this type.
     This aggregate stores
     @('namej'),
     @('fn'),
     the list of inputs derived from @('in1'), @('in2'), etc.,
     and the result of the ground call @('(fn in1 in2 ...)')."))
  ((name string)
   (function symbol)
   (inputs atj-test-value-list)
   (output atj-test-value))
  :pred atj-testp)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(fty::deflist atj-test-list
  :short "True lists of processed user-specified ATJ tests."
  :elt-type atj-test
  :true-listp t
  :elementp-of-nil nil
  :pred atj-test-listp)
